// 10026
#include <iostream>
#include <cstring>
#include <queue>
#define ii pair < int, int >
using namespace std;

char arr[105][105];
bool visit[105][105];
bool visits[105][105];
queue < ii > q;

int dy[4] = { -1, 0, 1, 0 };
int dx[4] = { 0, 1, 0, -1 };

int same(int ay, int ax, int by, int bx, int sak)
{
	if (sak)
	{
		if (arr[ay][ax] == 'R' && arr[by][bx] == 'G')
			return 1;
		if (arr[ay][ax] == 'G' && arr[by][bx] == 'R')
			return 1;
	}
	if (arr[ay][ax] == arr[by][bx])
		return 1;
	return 0;
}

int main()
{
	int n;
	scanf("%d", &n);

	for (int i = 0; i < n; i++)
		scanf("%s", arr[i]);

	int ans = 0;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (visit[i][j])
				continue;

			visit[i][j] = 1;
			ans++;
			q.push(make_pair(i, j));

			while (!q.empty())
			{
				int y = q.front().first;
				int x = q.front().second;

				for (int i = 0; i < 4; i++)
				{
					int ny = y + dy[i];
					int nx = x + dx[i];

					if (visit[ny][nx] == 0 && same(y, x, ny, nx, 0))
					{
						visit[ny][nx] = 1;
						q.push(make_pair(ny, nx));
					}
				}

				q.pop();
			}
		}
	}

	int ans2 = 0;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (visits[i][j])
				continue;

			visits[i][j] = 1;
			ans2++;
			q.push(make_pair(i, j));

			while (!q.empty())
			{
				int y = q.front().first;
				int x = q.front().second;

				for (int i = 0; i < 4; i++)
				{
					int ny = y + dy[i];
					int nx = x + dx[i];

					if (visits[ny][nx] == 0 && same(y, x, ny, nx, 1))
					{
						visits[ny][nx] = 1;
						q.push(make_pair(ny, nx));
					}
				}

				q.pop();
			}
		}
	}


	printf("%d %d", ans, ans2);
}
