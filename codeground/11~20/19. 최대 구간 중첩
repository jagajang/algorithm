#include <iostream>
#include <string>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
using namespace std;

#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL)

#define uint unsigned int
#define ll long long
#define ul unsigned long long

#define ii pair < int, int >
#define iii pair < int, ii >
#define LL pair < ll, ll >

#define INF 1'000'000'007
#define LINF 1'000'000'000'000'000'007

#define data int
#define p_q priority_queue < data > // max heap
#define np_q priority_queue < data, vector < data >, greater < data > > // min heap

int Answer;
ii arr[100'005];

int comp(ii a, ii b)
{
	if (a.first == b.first)
		return a.second > b.second;
	return a.first < b.first;
}

int main(int argc, char** argv)
{
	fastio;
	int T, test_case;
	cin >> T;

	for (test_case = 0; test_case < T; test_case++)
	{
		Answer = 0;

		int n;
		cin >> n;

		for (int i = 0; i < n; i++)
			cin >> arr[i].first >> arr[i].second;

		sort(arr, arr + n, comp);

		map < int, int > mp; // mp[val] = height;
		
		for (int i = 0; i < n; i++)
		{
			int st = arr[i].first;

			int en = arr[i].second;
			auto iter = mp.find(en);

			if (iter != mp.end()) // found
				mp[en]++;
			else
			{
				mp[en] = 1;

				iter = mp.find(en);
				iter++;

				if(iter != mp.end())
					mp[en] += iter->second;
			}

			Answer = max(Answer, mp[en]);
		}

		mp.clear();

		cout << "Case #" << test_case + 1 << endl;
		cout << Answer << endl;
	}

	return 0;
}
