#include <iostream>
#include <string>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
using namespace std;

#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL)

#define uint unsigned int
#define ll long long
#define ul unsigned long long

#define ii pair < int, int >
#define Iii pair < int, ii >
#define iiI pair < ii, int >
#define II pair < ii, ii>
#define LL pair < ll, ll >

#define INF 1'000'000'007
#define LINF 1'000'000'000'000'000'007

#define data ll
#define p_q priority_queue < data >
#define np_q priority_queue < data, vector < data >, greater < data > >

ul small[65];
ul large[65];

void getsmall(ul num, ul depth)
{
	if (depth == 64) return;

	small[depth] = min(small[depth], num);

	getsmall(num * 2, depth + 1);

	ul div = (num - 1) / 3;
	ul mod = (num - 1) % 3;

	if (mod == 0 && div % 2 == 1 && div > 1)
		getsmall(div, depth + 1);
}

int main(int argc, char** argv)
{
	int T, test_case;
	cin >> T;

	small[0] = 1;
	large[0] = 1;
	for (int i = 1; i < 64; i++)
	{
		small[i] = LINF;
		large[i] = large[i - 1] * 2;
	}

	getsmall(2, 1);

	for (test_case = 0; test_case < T; test_case++)
	{
		ul n;
		cin >> n;

		cout << "Case #" << test_case + 1 << endl;
		cout << small[n] << ' ' << large[n] << endl;
	}

	return 0;
}
