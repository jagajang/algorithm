#include <iostream>
#include <string>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
using namespace std;

#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL)

#define uint unsigned int
#define ll long long
#define ul unsigned long long

#define ii pair < int, int >
#define iii pair < int, ii >
#define LL pair < ll, ll >

#define INF 1'000'000'007
#define LINF 1'000'000'000'000'000'007

#define data iii
#define p_q priority_queue < data > // max heap
#define np_q priority_queue < data, vector < data >, greater < data > > // min heap

int Answer;
vector < int > v[205];
int visited[205];

void dfs(int nod)
{
	if (!Answer)
		return;

	for (int i = 0; i < v[nod].size(); i++)
	{
		int nex = v[nod][i];

		if (visited[nod] == visited[nex])
		{
			Answer = 0;
			break;
		}
		
		if (visited[nex] == 0)
		{
			visited[nex] = 3 - visited[nod];
			dfs(nex);
		}
	}
}

int main(int argc, char** argv)
{
	fastio;
	int T, test_case;
	cin >> T;

	for (test_case = 0; test_case < T; test_case++)
	{
		Answer = 1;

		int n, m;
		cin >> n >> m;

		for (int i = 1; i <= n; i++)
			v[i].clear();
		memset(visited, 0, sizeof(visited));

		for (int i = 0; i < m; i++)
		{
			int a, b;
			cin >> a >> b;
			v[a].push_back(b);
			v[b].push_back(a);
		}

		for (int i = 1; i <= n; i++)
		{
			if (visited[i]) continue;

			visited[i] = 1;
			dfs(i);
		}

		cout << "Case #" << test_case + 1 << endl;
		cout << Answer << endl;
	}

	return 0;
}
