#include <iostream>
#include <string>
#include <cstring>
#include <cmath>
#include <algorithm>
#include <functional>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <set>
using namespace std;

#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL)

#define uint unsigned int
#define ll long long
#define ul unsigned long long

#define ii pair < int, int >
#define iii pair < int, ii >
#define LL pair < ll, ll >

#define INF 1'000'000'007
#define LINF 1'000'000'000'000'000'007

#define data iii
#define p_q priority_queue < data > // max heap
#define np_q priority_queue < data, vector < data >, greater < data > > // min heap

int Answer;
int route[105][105];

int main(int argc, char** argv)
{
	fastio;
	int T, test_case;
	cin >> T;

	for (test_case = 0; test_case < T; test_case++)
	{
		Answer = 0;

		int n, m, k;
		cin >> n >> m >> k;

		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= n; j++)
				route[i][j] = INF;
			route[i][i] = 0;
		}

		for (int i = 0; i < m; i++)
		{
			int a, b, c;
			cin >> a >> b >> c;

			route[a][b] = min(route[a][b], c);
			route[b][a] = min(route[b][a], c);
		}

		for(int t = 1; t <= n; t++)
			for(int i = 1; i <= n; i++)
				for (int j = 1; j <= n; j++)
					route[i][j] = min(route[i][j], route[i][t] + route[t][j]);

		int p;
		cin >> p;

		while (p--)
		{
			int st, en;
			cin >> st >> en;

			if (route[st][en] > k)
				Answer++;
		}

		cout << "Case #" << test_case + 1 << endl;
		cout << Answer << endl;
	}

	return 0;
}
